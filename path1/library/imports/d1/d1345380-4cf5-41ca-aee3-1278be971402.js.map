{"version":3,"sources":["..\\..\\..\\..\\assets\\script/assets\\script\\car.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    // 上一帧 为了计算角度\r\n    @property\r\n    target = new cc.Vec2(0, 0);\r\n\r\n    // 动画节点\r\n    @property\r\n    selfNode = null\r\n\r\n    // 当前节点\r\n    @property\r\n    spriteNode = null\r\n\r\n    // 当前节点type\r\n    @property\r\n    spriteType = 0\r\n\r\n    // 其他碰撞节点暂存\r\n    @property\r\n    othersPrite = null\r\n\r\n    // main\r\n    @property\r\n    main = null\r\n\r\n    random(lower, upper) {\r\n        return Math.floor(Math.random() * (upper - lower + 1)) + lower;\r\n    }\r\n\r\n    onLoad() {\r\n        this.spriteNode = this.getComponent(cc.Sprite)\r\n        this.selfNode = this.getComponent(cc.Animation)\r\n        this.main=cc.find(\"Canvas\").getComponent(\"main\");\r\n        var random = this.random(0, 3);\r\n        console.log(random);\r\n        // if (random == 2) { random = 1 }\r\n        this.selfNode.play('car' + random)\r\n        this.selfNode.on('finished', this.removeNode, this);\r\n    }\r\n\r\n    start() {\r\n        this.target.x = this.node.x;\r\n        this.target.y = this.node.y;\r\n    }\r\n\r\n    update(dt) {\r\n        //计算出当前位置相对于X的偏移\r\n        if (this.target.x != this.node.x) {\r\n            var dx = this.target.x - this.node.x;\r\n            var dy = this.target.y - this.node.y;\r\n            var dir = cc.v2(dx, dy);\r\n            var angle = dir.signAngle(cc.v2(1, 0));\r\n            var degree = angle / Math.PI * 180;\r\n            this.node.angle = -degree - 180;\r\n            this.target.x = this.node.x;\r\n            this.target.y = this.node.y;\r\n\r\n            var manager = cc.director.getCollisionManager();\r\n            manager.enabled = true;\r\n            // manager.enabledDebugDraw = true;\r\n        }\r\n    }\r\n\r\n    removeNode() {\r\n        console.log('动画完事')\r\n        this.node.destroy();\r\n    }\r\n\r\n\r\n\r\n\r\n    onCollisionEnter(other, self) {\r\n\r\n        // console.log('我被撞到了')\r\n        // this.selfNode.stop();\r\n        // console.log(other)\r\n        // console.log(self)\r\n        // console.log(other.getComponent('lights'))\r\n\r\n\r\n        if (other.getComponent('lights') == null) {\r\n        } else {\r\n            this.othersPrite = other;\r\n            var type = other.node.getComponent('lights').type\r\n            console.log(type);\r\n            if (type == 0) {\r\n                this.selfNode.pause();\r\n            } else {\r\n                this.selfNode.resume();\r\n            }\r\n        }\r\n\r\n        // // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面\r\n        // var world = self.world;\r\n        // console.log(world)\r\n        // // 碰撞组件的 aabb 碰撞框\r\n        // var aabb = world.aabb;\r\n        // console.log(aabb)\r\n\r\n        // // 节点碰撞前上一帧 aabb 碰撞框的位置\r\n        // var preAabb = world.preAabb;\r\n\r\n        // // 碰撞框的世界矩阵\r\n        // var t = world.transform;\r\n\r\n        // // 以下属性为圆形碰撞组件特有属性\r\n        // var r = world.radius;\r\n        // var p = world.position;\r\n\r\n        // // 以下属性为 矩形 和 多边形 碰撞组件特有属性\r\n        // var ps = world.points;\r\n    }\r\n}\r\n"]}